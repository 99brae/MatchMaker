package matchmakerfinal;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Stephanie Mills
 */
public class Registration extends javax.swing.JFrame {
String passwordAsString;
    /**
     * Creates new form Registration
     */
    public Registration() {
        initComponents();
        // Set the screen size to 700 by 600
        setSize(1016, 699);
     
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        userName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jButton1.setText("Register");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(660, 500, 130, 40);
        getContentPane().add(password);
        password.setBounds(560, 360, 280, 30);
        getContentPane().add(userName);
        userName.setBounds(560, 270, 280, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matchmakerfinal/Registration.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1000, 662);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method is used to compare the users password to a list of bad
     * passwords. If the password is among one of those listed the user will be
     * asked to choose a new, better password
     *
     * @ param obj - none
     * @ return - true if password is not among those listed in the list 
     *          - false if the password is found in the list
     */
    private boolean compare() {
       
        // Get the length of the file
        int fileSize = getLength();
        // Create a String array of size fileSize to store the bad passwords
        String[] badPasswords = new String[fileSize];
        // here will be used to run through the array of bad pws
        int here = 0;
        // file of bas passwords to be compared to
        File x = new File("dictbadpass.txt");
        Scanner s = null;
        try {
            s = new Scanner(x);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        }
        // While you have no yet reached the end of the file
        while (s.hasNextLine()) {
            // store the next line in the file 
            String readIn = s.nextLine();
            // set the array element at fileSize as the line that was read in
            badPasswords[here] = readIn;
            // increase fileSize by one to move to the next array element
            here++;
        }
        // sort the array of bas passwords
        Arrays.sort(badPasswords);
        // using a binary search, check to see if the entered password matches any 
        //in the file (will return -1 if it does NOT match)
        if (Arrays.binarySearch(badPasswords,passwordAsString) < 0){
            // the password is not listed in the bad password file, the user passes this condition
        return false;
        }
        // the users password is not strong enough
          return true;               
       }
    
     /**
     * This method is used to ensure the user is entering an original username (or Student ID)
     * If the username has been used before the user will be asked to choose another
     *
     * @ param obj - none
     * @ return - true if username is not original
     *          - false if username is original
     */
    private boolean originalUN(){
      // String to store each line in the file
      String user = null;
      // The file of previously entered user info (SID and pw)   
      File f = new File ("user.txt");
      Scanner s = null;
        try {            
            //Create the scanner for the file
            s = new Scanner (f);
            // continue scanning while you have not reached the end of the file
            while (s.hasNextLine()){
            // Store the current line in user
            user = s.nextLine();
            // Split the line into 2 parts (SID and pw)
            String[] sa = user.split(",");     
            // if the username entered by the user matches one of those previously entered
            if (userName.getText().equals(sa[0])){
                // return true, making the user choose a new un
                return true;
            }
            // if you reach the end of the file
            else if (!s.hasNextLine()){
                // The username entered does not match any of those previously entered
                // return false to indicate the user's un is originl
                return false;
            }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        } catch (HeadlessException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;   
    }
    
     /**
     * This method is used to find the length of the file in number of lines
     *
     * @ param obj - none
     * @ return - int the length of the file 
     */
    private int getLength () {
        // this var will be used to store the size of the file (to create the array)
        int fileSize = 0;
        // The file of bad passwords        
        File x = new File("dictbadpass.txt");
        Scanner s = null;
        try {
            s = new Scanner(x);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        }
        // while there is still data left in the file
        while (s.hasNextLine()) {
            // increase the var that stores the file size by 1
            fileSize++;
            // move to next line
            s.nextLine();
        } 
        // return the size of the file6
        return fileSize;
    }
    /**
     * This method is used to check to ensure all field are filled in
     * 
     * @ param obj - The text field that is being tested (i.e first name)
     * @ return - true if the field is empty
     *          - false if the field is not empty
     */
    private boolean check(String text) {
        // if the field is empty
        if (text.isEmpty()) {
            // return true (yes it is empty)            
            return true;
        }
        // if the field is not empty return false
        return false;
    }

     /**
     * When the user presses the button -register- the method first check to make sure
     * the info entered meets the conditions (checked using the methods found above)
     * If they pass the conditions it will store the information entered in the fields 
     * in a file. An encrypted version of the password will be stored for security purposes.
     * 
     * @ param obj - none
     * @ return - none
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // var to store the password
        passwordAsString = "";
        // run through the password enetered (is an array of chars)
        for (int i = 0; i < password.getPassword().length; i++){
             // store as a string
             passwordAsString = passwordAsString + password.getPassword()[i];
        }
        // if any of the info field are blank
        if (check(userName.getText()) || check(passwordAsString)) {
            // diplay a message telling the user to fill in the field
            JOptionPane.showMessageDialog(this, "Please ensure all field are filled in correctly", "Registration", JOptionPane.PLAIN_MESSAGE);
        }
        // otherwise, check to make sure a valid student ID has been entered
        else if (studentID()){
           // is the entered un a student ID?
            JOptionPane.showMessageDialog(this, "Please ensure the correct student ID has been entered", "Student ID", JOptionPane.PLAIN_MESSAGE);
        }
         // otherwise, check to make sure the password is strong
        else if (compare()) {
            // if it is weak, display a message to convey such
            JOptionPane.showMessageDialog(this, "The password entered is not strong enough", "Password", JOptionPane.PLAIN_MESSAGE);
        // otherwise, check to make sure the username is original    
        } else if (originalUN()) {
            // if it is not original, display a message indicating such
            JOptionPane.showMessageDialog(this, "This username is already in use. Please choose another", "Register", JOptionPane.PLAIN_MESSAGE);
        }
        // if it meets the above conditions,
        else {
            PrintWriter pw = null;
            try {
                // file for info to be stored
                File f = new File("user.txt");
                // create a PrintWriter that will append the file (will add to it as apppose to overwrite)
                pw = new PrintWriter(new FileWriter(f, true));
                // store the username, encrypted password, first name and last name
                pw.println(userName.getText() + "," + encrypt());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                // close the print writer, hide this screen, and set the login screen to visible
                pw.close();
                // open up the log in screen
                setVisible(false);
                new LogIn().setVisible(true);
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed
     /**
     * Encrypt the password but converting it to a hash value
     * 
     * @ param obj - none
     * @ return - String (the encrypted password)
     */
    private String encrypt() throws Exception {
        // store the encrypted password as a String and return
        String hash = byteArrayToHexString(computeHash(passwordAsString));
        return hash;
    }

     /** This method computes a hash value to encrypt the string
      * 
      * @ param obj - String (the password)
     * @ return - byte[] the array of hash encryption
     */
    public static byte[] computeHash(String x)
            throws Exception {
        java.security.MessageDigest n = null;
        n = java.security.MessageDigest.getInstance("SHA-256");
        n.reset();
        n.update(x.getBytes());
        return n.digest();
    }

     /** This method computes a hash value to encrypt the string
     * 
     * @ param obj - String (the password)
     * @ return - byte[] the array of hash encryption
     */
    public static String byteArrayToHexString(byte[] c) {
        StringBuilder sb = new StringBuilder(c.length * 2);
        for (int i = 0; i < c.length; i++) {
            int v = c[i] & 0xff;
            if (v < 16) {
                sb.append('0');
            }
            sb.append(Integer.toHexString(v));
        }
        return sb.toString().toUpperCase();

    }
    
        private boolean studentID(){
      // String to store each line in the file
      String ID = null;
      // The file of Student IDs      
      File f = new File ("SID.txt");
      Scanner s = null;
        try {            
            //Create the scanner for the file
            s = new Scanner (f);
            // continue scanning while you have not reached the end of the file
            while (s.hasNextLine()){
            // Store the current line in ID
            ID = s.nextLine();             
            // if the username entered by the user matches one of the IDs in the file
            if (userName.getText().equals(ID)){
                // return false, the Student ID is valid
                return false;
            }
            // if you reach the end of the file
            else if (!s.hasNextLine()){
                // The username entered does not match an ID in the file
                return true;
            }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        } catch (HeadlessException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;    
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run(){
                new Registration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField userName;
    // End of variables declaration//GEN-END:variables
}
